#hdr
#include <3ds.h>

extern "C"
{
#include <math.h>
}

#include "game/game.hpp"
#include "game/menu.hpp"
#include "game/menu/gui/GUIElement.hpp"

using MM::Game;
using MM::GAME::Menu;
using MM::GFX::TextureUnit;
using MM::DS::LinkedList;
#end


namespace MM
{
    namespace GAME
    {
        namespace MENU
        {
            class GUIContainer : public GUIElement
            {
            protected:
                GUIElement* curr;
                
            public:
                LinkedList<GUIElement*> elems;
                
                GUIContainer(s16 x, s16 y, u16 w, u16 h) : GUIElement(x, y, w, h), curr(nullptr)
                {
                    
                }
                
                virtual void TouchStart(s16 tx, s16 ty)
                {
                    LinkedList<GUIElement*>::LinkedListIterator* i = elems.Iterate();
                    while(i->avail())
                    {
                        GUIElement* e = i->next();
                        if(!e) continue;
                        
                        s16 rx = 0;
                        s16 ry = 0;
                        
                        ChildOffset(e, &rx, &ry);
                        
                        if(!curr && rx <= tx && ry <= ty && (rx + e->w) > tx && (ry + e->h) > ty)
                        {
                            curr = e;
                            e->TouchStart(tx - rx, ty - ry);
                        }
                    }
                    delete i;
                    
                    if(!curr)
                    {
                        GUIElement::TouchStart(x, y);
                    }
                }
                
                virtual void TouchHold(s16 tx, s16 ty)
                {
                    if(curr)
                    {
                        s16 rx = 0;
                        s16 ry = 0;
                        
                        ChildOffset(curr, &rx, &ry);
                        
                        tx -= rx;
                        ty -= ry;
                        
                        if(tx < 0) tx = 0;
                        else if(tx >= curr->w) tx = curr->w - 1;
                        if(ty < 0) ty = 0;
                        else if(ty >= curr->h) ty = curr->h - 1;
                        curr->TouchHold(tx, ty);
                    }
                    else
                    {
                        GUIElement::TouchHold(tx, ty);
                    }
                }
                
                virtual void TouchRelease()
                {
                    if(curr)
                    {
                        curr->TouchRelease();
                        curr = nullptr;
                    }
                    else
                    {
                        GUIElement::TouchRelease();
                    }
                }
                
                virtual void Render(s16 offsx, s16 offsy)
                {
                    GUIElement::Render(offsx, offsy);
                    
                    LinkedList<GUIElement*>::LinkedListIterator* i = elems.Iterate();
                    while(i->avail())
                    {
                        GUIElement* e = i->next();
                        if(!e) continue;
                        
                        s16 rx = offsx;
                        s16 ry = offsy;
                        
                        ChildOffset(e, &rx, &ry);
                        
                        e->Render(rx, ry);
                    }
                    delete i;
                }
                
                virtual void Tick()
                {
                    LinkedList<GUIElement*>::LinkedListIterator* i = elems.Iterate();
                    while(i->avail())
                    {
                        GUIElement* e = i->next();
                        if(!e) continue;
                        
                        e->Tick();
                    }
                    delete i;
                }
                
                /*virtual void RenderOverlay()
                {
                    Render();
                }*/
                
                void Clear()
                {
                    GUIElement* e = nullptr;
                    while(elems.Pull(&e))
                    {
                        if(!e) continue;
                        delete e;
                    }
                }
                
                ~GUIContainer()
                {
                    Clear();
                }
            };
        }
    }
}
